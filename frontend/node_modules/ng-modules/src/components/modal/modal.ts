import { Component, ViewContainerRef, Directive, Input, ComponentFactoryResolver, ComponentRef, ChangeDetectorRef, ReflectiveInjector } from '@angular/core';
import { ModalController } from '../../providers/modal/modalController';
import { DomProvider } from '../../providers/dom/dom';
import { AnimationProvider } from '../../providers/animation/animation';

export interface ComponentItem {
	container?: HTMLElement;
	content: any;
	component?: ComponentRef<any>;
	promise?: { resolve, reject };
	destroy: () => void;
	data: any;
	options?: ModalOptions;
	title?: string;
	backgroundClick?: boolean;
	transparent?: boolean;
	animation?: string;
	animationState?: string;
	timeout?: number;
}

export interface ModalOptions {
	width?: number;
	height?: number;
	title?: string;
	backgroundClick?: boolean;
	headerCss?: string;
	transparent?: boolean;
	overlayCss?: string;
	animation?: string;
	// 毫秒值
	timeout?: number;
}

@Component({
	templateUrl: "./modal.html",
	selector: "modal-view",
})
export class ModalComponent {
	static Instance: ModalComponent = null;

	list: ComponentItem[] = [];

	constructor(
		private cdr: ChangeDetectorRef,
		private domProvider: DomProvider,
		private animation: AnimationProvider,
	) { }

	ngOnInit() {
		ModalComponent.Instance = this;
	}


	// animation(item: ComponentItem) {
	// 	let animation = this.animationBuilder.build([
	// 		style({ width: 0, height: 0 }),
	// 		animate("100ms 0s ease-out", style({
	// 			width: item.options.width + "px",
	// 			height: item.options.height + "px",
	// 		})),
	// 	])
	// 	let player = animation.create(item.container)
	// 	player.play();
	// }

	create(component: any, data?: any, options: ModalOptions = {} as any): Promise<any> & {
		destroy: () => void;
	} {
		try {
			options.width = options.width || 600;
			options.height = options.height || 400;
			let resolve, reject;
			let promise = new Promise((r, j) => { resolve = r; reject = j; });
			let scrollFn = (e: WheelEvent) => {
				let direction;
				(<any>e).wheelDelta > 0 && (direction = 1);
				(<any>e).wheelDelta < 0 && (direction = -1);
				if (item.container) {
					if (!this.domProvider.checkIsParent(item.container, e.toElement as any)
						|| this.domProvider.checkIsScrollToEnd(e.toElement as any, direction)) {
						e.preventDefault();
					}
				}
			}
			document.addEventListener("wheel", scrollFn, { passive: false });
			let item: ComponentItem = {
				animation: options.animation,
				animationState: options.animation || '' + ".init",
				title: options.title,
				backgroundClick: options.backgroundClick,
				transparent: options.transparent,
				options: options,
				content: component,
				promise: {
					resolve: resolve,
					reject: reject,
				},
				destroy: () => {
					// 销毁组件
					this.list.some((ci, index) => {
						if (ci == item) {
							if (item.component.instance.ngOnDestroy) {
								let result = item.component.instance.ngOnDestroy();
								if (result) {
									resolve();
								} else {
									reject();
								}
							} else {
								// resolve()
								reject()
							}
							this.list.splice(index, 1)
							return true;
						}
					})
					document.removeEventListener("wheel", scrollFn);
					this.cdr.detectChanges();
				},
				data: data,
			}
			this.list.push(item);
			this.cdr.detectChanges();
			if (options.timeout > 0) {
				setTimeout(() => {
					item.promise.resolve();
					item.destroy();
				}, options.timeout);
			}
			(<any>promise).destroy = () => {
				item.destroy();
			}
			return promise as any;
		} catch (e) {
			console.error(e)
		}
	}

	createInstance(index: number, comp: ComponentRef<any>) {
		let item = this.list[index];
		item.component = comp;
		item.animationState = item.animation + ".on";
		let animation = item.animation;
		if (this.animation[animation]) {
			this.animation[animation](item.container);
		}
	}
}

@Directive({
	selector: "[modal-content]",
})
export class ModalContentComponent {
	@Input("modal-contaner") container;
	@Input("modal-item") modalItem: ComponentItem;
	@Input("modal-content") modalContent;
	@Input("modal-data") data;
	@Input() index;

	constructor(
		private view: ViewContainerRef,
		private componentFactoryResolver: ComponentFactoryResolver,
	) { }

	ngOnInit() {
		this.modalItem.container = this.container;
		if (this.modalContent) {
			try {
				// 组件
				let component = this.modalContent.component || this.modalContent;
				// providers
				let resolver = this.modalContent.resolver || this.componentFactoryResolver;
				// 实例化组件
				let factory = resolver.resolveComponentFactory(component)
				// 解析providers
				let modalParams = new ModalController(this.data);
				modalParams.sendMessage = (data) => {
					this.modalItem.promise.resolve(data);
				}
				modalParams.sendError = (data) => {
					this.modalItem.promise.reject(data);
				}
				modalParams.close = () => {
					this.modalItem.destroy();
				}
				let injector = ReflectiveInjector.resolveAndCreate([
					{
						provide: component,
						useValue: component,
					},
					// 创建模态框参数provider
					{
						provide: ModalController,
						useValue: modalParams,
					}
				], this.modalContent.injector);
				// 实例化视图
				let comp = this.view.createComponent(factory, 0, injector);
				// (<any>comp.instance).modalData = this.data;
				ModalComponent.Instance.createInstance(this.index, comp)
			} catch (e) {
				console.error(e);
			}
		}
	}
}