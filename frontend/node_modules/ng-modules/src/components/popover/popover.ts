import { Component, Input, TemplateRef, ViewChild, ElementRef, HostListener } from "@angular/core";
import { PopoverProvider } from "../../providers/modal/popover";
import { PopoverController } from "../../providers/modal/popoverController";

@Component({
    selector: "[popover]",
    templateUrl: "./popover.html",
})
export class PopoverComponent {
    private _popover;
    @Input("popover") set popover(value) {
        if (value instanceof TemplateRef) {
            this.tpl = value;
            this._popover = this.tpl;
        }
    };
    @ViewChild("popEle") popEle: ElementRef;
    @ViewChild("popoverOutbox") popoverOutbox: ElementRef;
    @Input("popWidth") width;
    @Input("popHeight") height;
    @Input("popPosition") position = "right";

    constructor(
        private ele: ElementRef,
        private popoverProvider: PopoverProvider,
    ) { }

    parentEle: HTMLElement;

    popCtrl: PopoverController;

    private _popEleMouseOver = false;
    ngOnInit() {
        this.popCtrl = this.popoverProvider.create({
            content: this.popEle.nativeElement,
            position: this.position as any,
            width: this.width,
            height: this.height,
            parent: this.ele.nativeElement,
        });
        (<HTMLElement>this.popEle.nativeElement).addEventListener("mouseover", () => {
            this._popEleMouseOver = true;
            this.popCtrl.show();
            setTimeout(() => {
                this._popEleMouseOver = false;
            }, 100);
        });
        (<HTMLElement>this.popEle.nativeElement).addEventListener("mouseout", () => {
            this.popCtrl.hide();
        });
    }

    private _fn;
    private _popFn;
    bindBodyClick() {
        let popClick = false;
        let popClickTimer;
        (<HTMLElement>this.popEle.nativeElement).addEventListener("click", this._popFn = e => {
            popClick = true;
            clearTimeout(popClickTimer)
            popClickTimer = setTimeout(() => {
                popClick = false;
            }, 300);
        })
        document.body.addEventListener("click", this._fn = e => {
            if (popClick) return;
            if (!(<any>e).path.some(item => {
                if (item == this.popoverOutbox.nativeElement || item == this.parentEle) {
                    return true;
                }
            })) {
                this.popCtrl.hide();
            }
        })
    }
    clearBodyClick() {
        document.body.removeEventListener("click", this._fn);
    }

    tpl: TemplateRef<any>;

    @HostListener('mouseover', ['$event']) mouseOver(e) {
        this.popCtrl.show();
    }

    @HostListener('mouseout', ['$event']) mouseOut(e) {
        setTimeout(() => {
            if (!this._popEleMouseOver) {
                this.popCtrl.hide();
            }
        }, 50);
    }

    getRect() {
        let pop: HTMLElement = this.parentEle;
        return pop.getBoundingClientRect();
    }

}