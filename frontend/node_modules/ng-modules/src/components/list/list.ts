import { Component, Input, ElementRef, Output, EventEmitter, ViewChild, ChangeDetectorRef, ContentChild, TemplateRef, ContentChildren, Directive, QueryList } from '@angular/core';
import { Treetable } from './treetable/treetable';

@Directive({
	selector: "list-cell",
})
export class ListCellComponent {
	@Input() name;
	@Input() prop;
	@Input() useTemplate;
	@Input() headerTemplate;
	@Input() width;
	@Input() css;
	@Input() invisiable;
	@Output() colspan = new EventEmitter;
	@Output() rowspan = new EventEmitter;
	@ContentChild(TemplateRef) template: TemplateRef<any>;
}

@Component({
	selector: "list",
	templateUrl: "./list.html",
})
export class ListComponent {
	constructor(
		private cdr: ChangeDetectorRef,
	) { }
	/** treetable 树形列表实例 */
	treetableInstance = new Treetable;
	expandTree(item) {
		if (this._treetable) {
			this.treetableInstance.expand(item);
		}
	}
	compressTree(item) {
		if (this.treetable && item.$$expand) {
			this.treetableInstance.compress(item);
		}
	}

	private _treetable = false;
	@Input() set treetable(isTreetable) {
		if (typeof isTreetable == "string") {
			this._treetable = true;
		} else {
			this._treetable = isTreetable;
		}
	}
	get treetable() {
		return this._treetable;
	}
	@Input() manual: boolean = false;
	@ViewChild("datetime") set datetime(template) {
		this.innerTemplates.datetime = template;
	}
	@ViewChild("treetableTmp") set treetableTmp(template) {
		this.innerTemplates.treetableTmp = template;
	}
	/**
	 * 内置模板
	 */
	innerTemplates = {
		datetime: {},
		treetableTmp: {},
	}
	/**
	 * 读取行模板
	 */
	@ContentChildren(TemplateRef) contentTemplates;
	@ContentChildren(ListCellComponent) listCellTep: QueryList<ListCellComponent>;
	_cellTemplates;
	@ContentChildren(ListCellComponent) set cellTemplates(templates: QueryList<ListCellComponent>) {
		this._cellTemplates = templates;
		let headers = [];
		templates.map(item => {
			if (typeof item.useTemplate == "string") {
				item.useTemplate = this.innerTemplates[item.useTemplate];
			}
			if (!item.useTemplate) {
				if (item.template) {
					item.useTemplate = item.template;
				}
			}
			headers.push(item)
		})
		if (this.treetable) {
			headers.unshift({
				useTemplate: this.innerTemplates.treetableTmp,
				width: 40,
				css: "text-left",
			})
		}
		if (headers.length) {
			this.headers = headers;
		}
	};
	get cellTemplates() {
		return this._cellTemplates;
	}
	@Input() flat;
	@Input() templates = {};
	tableWidth: number = 0;
	@Input() list;
	_totalSize;
	@Input() set totalSize(totalSize) {
		this._totalSize = totalSize;
		this.pageTotalIndex = Math.ceil(totalSize / (this.pageSize || 1))
	};
	get totalSize() {
		return this._totalSize;
	}
	_pageSize = 10
	@Input() set pageSize(pageSize) {
		this._pageSize = pageSize;
		this.pageTotalIndex = Math.ceil((this.totalSize || 0) / this.pageSize)
	};
	get pageSize() {
		return this._pageSize;
	}
	pageIndex: number = 1;
	pageTotalIndex: number = 40;
	@ViewChild("container") container: ElementRef;
	_headers;
	@Input() set headers(values) {
		if (!values) {
			return;
		}
		if (typeof values == "string") {
			let valuesArr = values.split(",");
			let headers = valuesArr.map(item => {
				return {
					name: item,
					prop: item,
				}
			})
			this._headers = headers;
		} else {
			values.map(item => {
				if (typeof item.useTemplate == "string") {
					item.useTemplate = this.innerTemplates[item.useTemplate];
				}
				item.oriWidth = item.width;
			})
			let _values = [];
			values.map(item => {
				if (item.invisiable) {
					return
				}
				_values.push(item);
			})
			this._headers = _values;
		}
		this.calcHeaders(this._headers);
	};
	get headers() {
		return this._headers;
	}
	calcHeaders(headers) {
		if (this.flat || !headers) {
			return;
		}
		let totalWidth = this.container.nativeElement.clientWidth - headers.length - 10;
		let expectWidth = 0;
		headers.map(item => {
			item.width = parseFloat(item.oriWidth) || 0;
			expectWidth += item.width;
		})
		let tableWidth = 0;
		if (expectWidth < totalWidth) {
			headers.map(item => {
				item.width = (parseInt((item.width / expectWidth) * 10000 as any) / 10000 * totalWidth) || (totalWidth / headers.length);
				tableWidth += item.width;
			})
		}
		this.tableWidth = tableWidth || expectWidth;
	}

	recalHeader() {
		this.cdr.detectChanges();
		setTimeout(() => {
			this.cellTemplates = this.listCellTep;
		}, 1)
	}

	@Output("onpage") onpage = new EventEmitter();

	refresh() {
		this.toPage(this.pageIndex);
	}
	/**是否加载过了 */
	loaded = false;
	loadingStatus: boolean;
	toPage(pageIndex) {
		if (this.loadingStatus) {
			return;
		}
		let load = false;
		this.loadingStatus = true;
		pageIndex = parseInt(pageIndex);
		pageIndex - this.pageTotalIndex >= 0 && (pageIndex = this.pageTotalIndex);
		pageIndex <= 0 && (pageIndex = 1);
		let data: PageEvent = {} as any;
		data.isFirst = this.list ? false : true;
		data.pageSize = this.pageSize;
		data.pageIndex = pageIndex;
		data.complete = (e) => {
			if (!load) {
				this.loadingStatus = false;
				this.complete(e);
			}
		};
		data.cancel = () => {
			load = true;
			this.loadingStatus = false;
			this.loaded = true;
		}
		this.pageIndex = pageIndex;
		this.inputPageIndex = pageIndex;
		this.onpage.emit(data);
		// setTimeout(() => {
		// 	this.loadingStatus = false;
		// 	data.complete = () => { };
		// }, 5000)
	}
	complete(e: PageEvent) {
		this.loaded = true;
		this.tdDatas = {};
		if (this.pageIndex > 1) {
			if (e.list.length == 0) {
				return this.toPage(this.pageIndex - 1);
			}
		}
		this.totalSize = e.totalSize;
		// 树形列表
		if (this.treetable) {
			this.treetableInstance.calcDeep(e.list);
		}
		this.list = e.list;
		this.cdr.detectChanges();
	}
	inputPageIndex
	inputPageKeyUp(e) {
		if (e.keyCode == 13) {
			this.inputPageIndex = this.inputPageIndex || 1;
			let index = (+this.inputPageIndex);
			if (index == this.inputPageIndex) {
				this.toPage(this.inputPageIndex);
			} else {
				this.inputPageIndex = this.pageIndex;
			}
		}
	}
	resizeFn;
	ngOnInit() {
		window.addEventListener("resize", this.resizeFn = () => {
			this.calcHeaders(this._headers)
		})
		if (!this.manual) {
			this.toPage(1)
		}
	}
	ngAfterContentInit() {
		this.recalHeader()
	}

	ngOnDestroy() {
		window.removeEventListener("resize", this.resizeFn);
	}

	tdDatas: {
		[index: string]: ListTdData
	} = {}
	tdKey(rowIndex: number, colIndex: number) {
		return `${this.pageIndex}_${rowIndex}_${colIndex}`;
	}
	getTdData(rowIndex: number, colIndex: number) {
		let colInfo = this.headers[colIndex];
		let preRowInfo = this.headers[colIndex - 1];
		let nextRowInfo = this.headers[colIndex + 1];
		let key = `${this.pageIndex}_${rowIndex}_${colIndex}`;
		if (this.tdDatas[key]) {
			return this.tdDatas[key];
		} else {
			this.tdDatas[key] = {
				rowIndex: rowIndex,
				colIndex: colIndex,
				list: this.list,
				headers: this.headers,
				pre: this.list[rowIndex - 1],
				current: this.list[rowIndex],
				next: this.list[rowIndex + 1],
				prop: colInfo.prop,
				preProp: preRowInfo ? preRowInfo.prop : undefined,
				nextProp: nextRowInfo ? nextRowInfo.prop : undefined,
				hideRow: () => {
					this.tdDatas[key].rowspan = -1;
				},
				hideCol: () => {
					this.tdDatas[key].colspan = -1;
				},
				setRowspan: (i: number) => {
					this.tdDatas[key].rowspan = i;
				},
				setColspan: (i: number) => {
					this.tdDatas[key].colspan = i;
				},
			}
			return this.tdDatas[key];
		}
	}
	calcRowspan: any;
	calcColspan: any;
	/**设置跨行计算 */
	setCalcRowspan(fn: (data: ListTdData, ele: HTMLElement) => void) {
		this.calcRowspan = (rowi, coli, ele) => {
			let tdData = this.getTdData(rowi, coli);
			fn(tdData, ele);
			return tdData.rowspan || 1
		}
	}
	/**设置跨列计算 */
	setCalcColspan(fn: (data: ListTdData, ele: HTMLElement) => void) {
		this.calcColspan = (rowi, coli, ele) => {
			let tdData = this.getTdData(rowi, coli);
			fn(this.getTdData(rowi, coli), ele);
			return tdData.colspan || 1;
		}
	}

	/**单列合并 */
	sameRowCombine(e: ListTdData, ele: HTMLElement) {
		let prop = e.prop;
		if ((!e.pre) || (e.pre[prop] != e.current[prop])) {
			let rowspan = 1;
			while (e.list[e.rowIndex + rowspan] && (e.current[prop] == e.list[e.rowIndex + rowspan][prop])) {
				rowspan++;
			}
			e.setRowspan(rowspan);
		} else if (e.pre[prop] == e.current[prop]) {
			ele.style.display = "none"
			e.hideRow();
		} else {
			e.setRowspan(1);
		}
	}

	/**复制某列的合并数据 */
	copyRowCombine(e: ListTdData, ele: HTMLElement,/**第一列为 0，以此类推 */ target: number) {
		let firstColKey = `${this.pageIndex}_${e.rowIndex}_${target}`;
		e.setRowspan(this.tdDatas[firstColKey].rowspan)
		if (this.tdDatas[firstColKey].rowspan == -1) {
			ele.style.display = "none"
		}
	}
}

export interface PageEvent {
	isFirst: boolean;
	pageIndex: number;
	pageSize: number;
	list: any[];
	totalSize: number;
	complete: (e: PageEvent) => void
	cancel: () => void;
}

export interface ListTdData {
	rowIndex: number;
	colIndex: number;
	list: any;
	headers: any;
	pre: any;
	current: any;
	next: any;
	prop: any;
	preProp: any;
	nextProp: any;
	/**大于零，如果为 -1 表示隐藏 */
	rowspan?: number;
	/**大于零，如果为 -1 表示隐藏 */
	colspan?: number;
	hideRow: Function;
	hideCol: Function;
	setRowspan: (i: number) => void;
	setColspan: (i: number) => void;
}
