import { ElementRef, Directive, Output, EventEmitter, Input } from '@angular/core';

/**
 * DOM拖动
 */
@Directive({
	selector: '[moveable]',
	host: {
		"(mousedown)": "mousedown($event)",
		"(mouseup)": "mouseup($event)",
	}
})
export class MoveableComponent {
	@Input("moveable") moveDom: HTMLElement;
	@Output("moveable") click = new EventEmitter();
	isMouseDown: boolean = false;
	target: HTMLElement;
	constructor(
		private elementRef: ElementRef
	) { };
	ngOnInit() {
		this.target = this.moveDom || this.elementRef.nativeElement;
	}

	/**重新计算margin，防止速度变慢 */
	private calcMarginStatus: boolean;
	reMargin() {
		if (!this.calcMarginStatus) {
			this.calcMarginStatus = true;
			let style = window.getComputedStyle(this.target);
			let position = style.getPropertyValue("position")
			if (position == "absolute") {
				this.target.style.setProperty("margin", style.getPropertyValue("margin"));
			}
		}
	}

	isMoved: boolean = false;
	moveEventFn;
	moveUpEventFn
	mousedown(e: MouseEvent) {
		this.preClientX = e.clientX;
		this.preClientY = e.clientY;
		this.isMouseDown = true;
		document.addEventListener("mousemove", this.moveEventFn = (e) => {
			this.mousemove(e);
		})
		this.isMoved = false;
		document.addEventListener("mouseup", this.moveUpEventFn = (e) => {
			this.mouseup(e);
		})
		this.reMargin();
	}

	mouseup(e: MouseEvent) {
		this.isMouseDown = false;
		document.removeEventListener("mousemove", this.moveEventFn)
		document.removeEventListener("mouseup", this.moveUpEventFn)
		if (!this.isMoved) {
			this.click.emit(e);
		}
		this.isMoved = false;
	}
	preClientX;
	preClientY;
	mousemove(e) {
		if (this.isMouseDown) {
			let diffX = e.clientX - this.preClientX;
			let diffY = e.clientY - this.preClientY;
			if (diffX > 1 || diffY > 1 || diffY < -1 || diffX < -1) {
				this.isMoved = true;
			}
			this.preClientX = e.clientX;
			this.preClientY = e.clientY;
			let [left, top] = [
				parseInt(this.target.style.left || '0') + diffX,
				parseInt(this.target.style.top || '0') + diffY
			];
			this.target.style.setProperty("left", left + "px");
			this.target.style.setProperty("top", top + "px");
		} else {
			this.isMoved = false;
		}
	}
}
