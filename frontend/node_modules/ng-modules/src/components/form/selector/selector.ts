import { Component, ElementRef, HostListener, Renderer2 } from "@angular/core";
import { ControlValueAccessor, NG_VALUE_ACCESSOR } from "@angular/forms";

@Component({
	selector: "selector",
	providers: [
		{ provide: NG_VALUE_ACCESSOR, useClass: SelectorComponent }
	],
	templateUrl: "./selector.html",
})
export class SelectorComponent implements ControlValueAccessor {
	writeValue(obj: any) {
		throw new Error("Method not implemented.");
	}
	registerOnChange(fn: any) {
		throw new Error("Method not implemented.");
	}
	registerOnTouched(fn: any) {
		throw new Error("Method not implemented.");
	}
	setDisabledState?(isDisabled: boolean) {
		throw new Error("Method not implemented.");
	}
	constructor(
		private element: ElementRef,
		private renderer2: Renderer2,
	) { }
	private parentElement: HTMLElement;
	ngOnInit() {
		this.parentElement = this.element.nativeElement.parentElement;
	}

	@HostListener("focus", ["$event"]) focus() {
		this.renderer2.addClass(this.element.nativeElement, "focus");
		this.renderer2.addClass(this.parentElement, "focus");
	}
	@HostListener("blur", ["$event"]) blur() {
		this.renderer2.removeClass(this.element.nativeElement, "focus");
		this.renderer2.removeClass(this.parentElement, "focus");
	}
}