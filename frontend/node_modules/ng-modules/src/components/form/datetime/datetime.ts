import { Directive, ElementRef, forwardRef } from "@angular/core";
import { ControlValueAccessor, NG_VALUE_ACCESSOR } from "@angular/forms";
import { Input } from "@angular/core";
import { UtilProvider } from "../../../providers/util/util";
import { I18nProvider } from "../../../providers/i18n/i18n";

@Directive({
	selector: "[datetime]",
	providers: [
		{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DatetimeDirective), multi: true }
	],
	// template: "<ng-content></ng-content>",
})
export class DatetimeDirective implements ControlValueAccessor {
	writeValue(value: any) {
		if (value) {
			$(this.element.nativeElement).data("daterangepicker").setStartDate(value);
		}
	}
	_registerOnChange() { }
	registerOnChange(fn: any) {
		this._registerOnChange = fn;
	}
	touched() { }
	registerOnTouched(fn: any) {
		this.touched = fn;
	}
	setDisabledState?(isDisabled: boolean) { }
	constructor(
		private element: ElementRef,
		private util: UtilProvider,
	) { }

	_config;
	@Input("datetime") set datetime(value) {
		this._config = value;
		this.setting(value);
	};
	get datetime() {
		return this._config;
	}

	ngOnInit() {
	}

	setting(config?: any) {
		let data = this.util.extend({
			singleDatePicker: true,
			autoUpdateInput: false,
			locale: I18nProvider.get("dateSetting"),
		}, config, true);
		$(this.element.nativeElement).daterangepicker(data);

		let that = this;
		$(this.element.nativeElement).on('apply.daterangepicker', function (ev, picker) {
			let format = "YYYY-MM-DD"
			if (that.datetime && that.datetime.locale && that.datetime.locale.format) {
				format = that.datetime.locale.format
			}
			that._registerOnChange();
			$(this).val(picker.startDate.format(format));
		});

		$(this.element.nativeElement).on('cancel.daterangepicker', function () {
			// $(this).val('');
		});
	}

}