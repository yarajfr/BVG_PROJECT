import { InjectionToken } from "@angular/core";
import { Locales } from "../../locales/index";

export const I18NToken = new InjectionToken<any>('I18NToken');
// export const I18nProvider = new InjectionToken<any>('I18nProvider');

export function I18nProviderFactory(i18n): any {
	let provider = new I18nProvider()
	provider.init(i18n);
	return provider
}

// @Injectable()
export class I18nProvider {
	public static LangList = {};
	static defaultLocales = "zh";

	/**配置 */
	public config(i18n) {
		i18n.map(item => {
			item.contains.map(lang => {
				lang = lang.toLocaleLowerCase();
				if (I18nProvider.LangList[lang]) {
					for (let key in item) {
						I18nProvider.LangList[lang][key] = item[key];
					}
				} else {
					I18nProvider.LangList[lang] = item;
				}
			})
		})
	}

	constructor(
	) { }

	init(i18n) {
		this.config(Locales);
		if (i18n) {
			if (i18n.locales) {
				this.config(i18n.locales);
			}
			if (i18n.default) {
				I18nProvider.defaultLocales = i18n.default;
			}
		}
	}

	/**获取浏览器语言 */
	static getLang() {
		let data = localStorage.getItem("i18n_lang")
		if (data) {
			return data;
		} else {
			let lang = window.navigator.language.toLocaleLowerCase();
			localStorage.setItem("i18n_lang", lang);
			return lang;
		}
	}

	/**解析提取文字 */
	public get(key: string | number) {
		return I18nProvider.get(key)
	}

	static get(key: string | number) {
		let lang = I18nProvider.getLang();
		try {
			if (I18nProvider.LangList[lang]) {
				return I18nProvider.LangList[lang][key] || I18nProvider.LangList[I18nProvider.defaultLocales][key] || "";
			} else {
				if (I18nProvider.LangList[I18nProvider.defaultLocales]) {
					return I18nProvider.LangList[I18nProvider.defaultLocales][key] ||
						"";
				}
				return "";
			}
		} catch (e) {
			console.log(`${lang} locales file is lost, please check your code! 语言包丢失，请检查代码！`)
		}
	}

	public changeLang(lang) {
		localStorage.setItem("i18n_lang", lang);
	}
}