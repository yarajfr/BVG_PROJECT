export interface PopoverConfig {
    content: string | HTMLElement;
    position: "right" | "left" | "top" | "bottom" | "right-top" |
    'right-bottom' | 'left-top' | 'left-bottom' | 'top-left' |
    'top-right' | 'bottom-right' | 'bottom-left';
    width: number;
    height: number;
}

export class PopoverController {
    constructor(
        private config: PopoverConfig,
        private ele: HTMLElement,
    ) {
        this.buildDom();
    }

    private popEle: HTMLElement;
    private popoverOutbox: HTMLElement;

    parentEle: HTMLElement;

    buildDom() {
        let dom = $(`<div class="co-popover" #popoverOutbox>
          <div class="co-popover-container" #popEle>
            <div class="co-box"></div>
          </div>
        </div>`)
        this.popoverOutbox = dom[0];
        this.popEle = dom.find(".co-popover-container")[0];
        dom.find(".co-box").append(this.config.content);
        this.parentEle = this.ele;
        this.parentEle.style.position = "";
        switch (getComputedStyle(this.parentEle).position) {
            case "absolute": break;
            case "fixed": break;
            case "relative": break;
            default: this.parentEle.style.position = "relative";
        }
        document.body.appendChild(this.popoverOutbox);
    }

    private _fn;
    bindBodyClick() {
        document.body.addEventListener("click", this._fn = e => {
            if (!(<any>e).path.some(item => {
                if (item == this.popoverOutbox || item == this.parentEle) {
                    return true;
                }
            })) {
                this.hide();
            }
        })
    }
    clearBodyClick() {
        document.body.removeEventListener("click", this._fn);
    }

    getRect() {
        let pop: HTMLElement = this.parentEle;
        return pop.getBoundingClientRect();
    }

    show() {
        this.bindBodyClick();
        let pop: HTMLElement = this.popEle;
        pop.classList.add("active")
        pop.classList.add(this.config.position);
        let rect = this.getRect()
        let parentWidth = this.parentEle.clientWidth;
        let parentHeight = this.parentEle.clientHeight;
        let viewWidth = this.config.width;
        let viewHeight = this.config.height;
        let attr: any = {
            height: viewHeight + "px",
            width: viewWidth + "px",
        };
        switch (this.config.position) {
            case "right":
                attr.top = (rect.top + parentHeight / 2 - viewHeight / 2) + "px";
                attr.left = (parentWidth + rect.left) + "px";
                break;
            case "right-top":
                attr.top = (rect.top) + "px";
                attr.left = (parentWidth + rect.left) + "px";
                break;
            case "right-bottom":
                attr.top = (rect.top + parentHeight - viewHeight) + "px";
                attr.left = (parentWidth + rect.left) + "px";
                break;
            case "left":
                attr.top = (rect.top + parentHeight / 2 - viewHeight / 2) + "px";
                attr.left = (rect.left - viewWidth) + "px";
                break;
            case "left-top":
                attr.top = (rect.top) + "px";
                attr.left = (rect.left - viewWidth) + "px";
                break;
            case "left-bottom":
                attr.top = (rect.top + parentHeight - viewHeight) + "px";
                attr.left = (rect.left - viewWidth) + "px";
                break;
            case "top":
                attr.top = (rect.top - viewHeight) + "px";
                attr.left = (rect.left + parentWidth / 2 - viewWidth / 2) + "px";
                break;
            case "top-left":
                attr.top = (rect.top - viewHeight) + "px";
                attr.left = (rect.left) + "px";
                break;
            case "top-right":
                attr.top = (rect.top - viewHeight) + "px";
                attr.left = (rect.left + parentWidth - viewWidth) + "px";
                break;
            case "bottom":
                attr.top = (rect.top + parentHeight) + "px";
                attr.left = (rect.left + parentWidth / 2 - viewWidth / 2) + "px";
                break;
            case "bottom-left":
                attr.top = (rect.top + parentHeight) + "px";
                attr.left = (rect.left) + "px";
                break;
            case "bottom-right":
                attr.top = (rect.top + parentHeight) + "px";
                attr.left = (rect.left + parentWidth - viewWidth) + "px";
                break;
            default:
                break;
        }
        for (let key in attr) {
            pop.style[key] = attr[key];
        }
    }

    hide() {
        let pop: HTMLElement = this.popEle;
        pop.classList.remove("active")
        this.clearBodyClick();
    }
}