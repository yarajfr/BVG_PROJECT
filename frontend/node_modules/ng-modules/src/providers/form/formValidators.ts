import { AbstractControl } from "@angular/forms";
import { I18nProvider } from "../i18n/i18n";

export class FormValidators {
	static errors = {
		required: I18nProvider.get("__9"), // "表单中还有必填项未填写",
		phoneNo: I18nProvider.get("__10"), // "表单中有手机号码填写不正确",
		min: I18nProvider.get("__11"), // "表单中有值小于最小值",
		max: I18nProvider.get("__12"), // "表单中有值大于最大值",
		integer: I18nProvider.get("__13"), //  "表单中有值不是整数",
		decimal: I18nProvider.get("__14"), // "表单中有值不是小数",
		async: I18nProvider.get("__15"), //  "表单填写不正确",
	};
	static checkError(controls: any) {
		let error;
		for (let key in controls) {
			if ((!controls[key].valid) && controls[key].errors) {
				error = FormValidators.errors[key] || controls[key].errors[key] ||
					(controls[key].errorTip) ||
					(controls[key].controlName ? (controls[key].controlName + "填写不正确") : "") || I18nProvider.get("__15"); // "表单填写不正确";
				break;
			}
		}
		if (error) {
			// 有错误
			return error;
		}
	}

	static hasValue(value) {
		if (typeof value == "string") {
			if (value) {
				return true;
			} else {
				return false;
			}
		} else {
			if (typeof value == "number") {
				return true;
			}
			if (value) {
				return true;
			} else {
				return false;
			}
		}
	}

	/**限制最小值 */
	static min(min: number, errorTip?: string) {
		let minFn = (control: AbstractControl): {
			[key: string]: boolean | string;
		} => {
			let value = control.value;
			if (FormValidators.hasValue(value)) {
				if (value > min) {
					return null;
				} else {
					return { min: errorTip || (min + "") }
				}
			} else {
				return null;
			}
		}
		return minFn;
	}

	/**限制最大值 */
	static max(max: number, errorTip?: string) {
		let maxFn = (control: AbstractControl): {
			[key: string]: boolean | string;
		} => {
			let value = control.value;
			if (FormValidators.hasValue(value)) {
				if (value < max) {
					return null;
				} else {
					return { max: errorTip || (max + "") }
				}
			} else {
				return null;
			}
		}
		return maxFn;
	}

	/**判断整型 */
	static isInteger(errorTip?: string) {
		let intFn = (control: AbstractControl): {
			[key: string]: boolean | string;
		} => {
			let value = control.value;
			if (FormValidators.hasValue(value)) {
				let num = parseInt(value);
				if (value == num) {
					return null;
				} else {
					return { integer: errorTip || true }
				}
			} else {
				return null;
			}
		}
		return intFn;
	};

	/**判断小数 */
	static isDecimal(errorTip?: string) {
		let decFn = (control: AbstractControl): {
			[key: string]: boolean | string;
		} => {
			let value = control.value;
			if (FormValidators.hasValue(value)) {
				let num = parseFloat(value);
				if (value == num) {
					return null;
				} else {
					return { decimal: errorTip || true }
				}
			} else {
				return null;
			}
		}
		return decFn;
	};

	/**判断手机号码 */
	static isPhoneNo(errorTip?: string) {
		let pnoFn = (control: AbstractControl): {
			[key: string]: boolean | string;
		} => {
			let value = control.value;
			if (FormValidators.hasValue(value)) {
				if (/^1[3456789]\d{9}$/.test(value)) {
					return null;
				} else {
					return { phoneNo: errorTip || true }
				}
			} else {
				return null;
			}
		}
		return pnoFn;
	}

	/**异步验证器 */
	static asyncValidator(callback: (value: any) => Promise<any>, errorTip?: string) {
		let timer, cancel;
		return async (control: AbstractControl) => {
			return new Promise((resolve) => {
				clearTimeout(timer);
				cancel && cancel();
				cancel = () => resolve({ async: false });
				timer = setTimeout(async () => {
					let value = control.value;
					if (FormValidators.hasValue(value)) {
						try {
							resolve(null);
						} catch (e) {
							resolve({ async: errorTip || e });
						}
					} else {
						resolve(null);
					}
				}, 500);
			});
		}
	}

	static controlName(name: string) {
		let nameFn = (control: AbstractControl): {
			[key: string]: boolean | string;
		} => {
			(<any>control).controlName = name;
			return null;
		}
		return nameFn;
	}

	static errorTip(err: string) {
		let nameFn = (control: AbstractControl): {
			[key: string]: boolean | string;
		} => {
			(<any>control).errorTip = err;
			return null;
		}
		return nameFn;
	}
}