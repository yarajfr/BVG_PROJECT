import { Injectable } from "@angular/core";
import { style, animate, keyframes } from '@angular/animations';
import { AnimationBuilder } from '@angular/animations';

@Injectable()
export class AnimationProvider {

	constructor(
		private animationBuilder: AnimationBuilder,
	) { }

	/**bounceIn */
	bounceIn(element: HTMLElement) {
		return new Promise((resolve) => {
			let animation = this.animationBuilder.build([
				animate(".4s", keyframes([
					style({
						'animation-timing-function': "cubic-bezier(0.215, 0.610, 0.355, 1.000)",
						opacity: 0, transform: "scale3d(.3, .3, .3)"
					}),
					style({
						'animation-timing-function': "cubic-bezier(0.215, 0.610, 0.355, 1.000)",
						opacity: 0.2, transform: "scale3d(1.1, 1.1, 1.1)"
					}),
					style({
						'animation-timing-function': "cubic-bezier(0.215, 0.610, 0.355, 1.000)",
						opacity: 0.4, transform: "scale3d(.9, .9, .9)"
					}),
					style({
						'animation-timing-function': "cubic-bezier(0.215, 0.610, 0.355, 1.000)",
						opacity: .6, transform: "scale3d(1.03, 1.03, 1.03)"
					}),
					style({
						'animation-timing-function': "cubic-bezier(0.215, 0.610, 0.355, 1.000)",
						opacity: .8, transform: "scale3d(.97, .97, .97)"
					}),
					style({
						'animation-timing-function': "cubic-bezier(0.215, 0.610, 0.355, 1.000)",
						opacity: 1, transform: "scale3d(1, 1, 1)"
					}),
				]))
			])
			let player = animation.create(element);
			player.onDone(resolve);
			player.play();
		})
	}

	/**pulse */
	pulse(element: HTMLElement) {
		return new Promise((resolve) => {
			let animation = this.animationBuilder.build([
				animate("1s ease", keyframes([
					style({ transform: "scale3d(1, 1, 1)" }),
					style({ transform: "scale3d(1.05, 1.05, 1.05)" }),
					style({ transform: "scale3d(1, 1, 1)" }),
				]))
			])
			let player = animation.create(element);
			player.onDone(resolve);
			player.play();
		})
	}

	/**shake */
	shake(element: HTMLElement) {
		return new Promise((resolve) => {
			let animation = this.animationBuilder.build([
				animate("1s ease", keyframes([
					style({ transform: "translate3d(0, 0, 0)" }),
					style({ transform: "translate3d(-10px, 0, 0)" }),
					style({ transform: "translate3d(10px, 0, 0)" }),
					style({ transform: "translate3d(-10px, 0, 0)" }),
					style({ transform: "translate3d(10px, 0, 0)" }),
					style({ transform: "translate3d(-10px, 0, 0)" }),
					style({ transform: "translate3d(10px, 0, 0)" }),
					style({ transform: "translate3d(-10px, 0, 0)" }),
					style({ transform: "translate3d(10px, 0, 0)" }),
					style({ transform: "translate3d(-10px, 0, 0)" }),
					style({ transform: "translate3d(0, 0, 0)" }),
				]))
			])
			let player = animation.create(element);
			player.onDone(resolve);
			player.play();
		})
	}

	/**渐出 */
	fadeOut(element: HTMLElement) {
		return new Promise((resolve) => {
			let animation = this.animationBuilder.build([
				animate("1s ease", keyframes([
					style({ opacity: 1 }),
					style({ opacity: 0 }),
				]))
			])
			let player = animation.create(element);
			player.onDone(resolve);
			player.play();
		});
	}

	/**渐入 */
	fadeIn(element: HTMLElement) {
		return new Promise((resolve) => {
			let animation = this.animationBuilder.build([
				animate("1s ease", keyframes([
					style({ opacity: 0 }),
					style({ opacity: 1 }),
				]))
			])
			let player = animation.create(element);
			player.onDone(resolve);
			player.play();
		});
	}
}
