var PopoverController = (function () {
    function PopoverController(config, ele) {
        this.config = config;
        this.ele = ele;
        this.buildDom();
    }
    PopoverController.prototype.buildDom = function () {
        var dom = $("<div class=\"co-popover\" #popoverOutbox>\n          <div class=\"co-popover-container\" #popEle>\n            <div class=\"co-box\"></div>\n          </div>\n        </div>");
        this.popoverOutbox = dom[0];
        this.popEle = dom.find(".co-popover-container")[0];
        dom.find(".co-box").append(this.config.content);
        this.parentEle = this.ele;
        this.parentEle.style.position = "";
        switch (getComputedStyle(this.parentEle).position) {
            case "absolute": break;
            case "fixed": break;
            case "relative": break;
            default: this.parentEle.style.position = "relative";
        }
        document.body.appendChild(this.popoverOutbox);
    };
    PopoverController.prototype.bindBodyClick = function () {
        var _this = this;
        document.body.addEventListener("click", this._fn = function (e) {
            if (!e.path.some(function (item) {
                if (item == _this.popoverOutbox || item == _this.parentEle) {
                    return true;
                }
            })) {
                _this.hide();
            }
        });
    };
    PopoverController.prototype.clearBodyClick = function () {
        document.body.removeEventListener("click", this._fn);
    };
    PopoverController.prototype.getRect = function () {
        var pop = this.parentEle;
        return pop.getBoundingClientRect();
    };
    PopoverController.prototype.show = function () {
        this.bindBodyClick();
        var pop = this.popEle;
        pop.classList.add("active");
        pop.classList.add(this.config.position);
        var rect = this.getRect();
        var parentWidth = this.parentEle.clientWidth;
        var parentHeight = this.parentEle.clientHeight;
        var viewWidth = this.config.width;
        var viewHeight = this.config.height;
        var attr = {
            height: viewHeight + "px",
            width: viewWidth + "px",
        };
        switch (this.config.position) {
            case "right":
                attr.top = (rect.top + parentHeight / 2 - viewHeight / 2) + "px";
                attr.left = (parentWidth + rect.left) + "px";
                break;
            case "right-top":
                attr.top = (rect.top) + "px";
                attr.left = (parentWidth + rect.left) + "px";
                break;
            case "right-bottom":
                attr.top = (rect.top + parentHeight - viewHeight) + "px";
                attr.left = (parentWidth + rect.left) + "px";
                break;
            case "left":
                attr.top = (rect.top + parentHeight / 2 - viewHeight / 2) + "px";
                attr.left = (rect.left - viewWidth) + "px";
                break;
            case "left-top":
                attr.top = (rect.top) + "px";
                attr.left = (rect.left - viewWidth) + "px";
                break;
            case "left-bottom":
                attr.top = (rect.top + parentHeight - viewHeight) + "px";
                attr.left = (rect.left - viewWidth) + "px";
                break;
            case "top":
                attr.top = (rect.top - viewHeight) + "px";
                attr.left = (rect.left + parentWidth / 2 - viewWidth / 2) + "px";
                break;
            case "top-left":
                attr.top = (rect.top - viewHeight) + "px";
                attr.left = (rect.left) + "px";
                break;
            case "top-right":
                attr.top = (rect.top - viewHeight) + "px";
                attr.left = (rect.left + parentWidth - viewWidth) + "px";
                break;
            case "bottom":
                attr.top = (rect.top + parentHeight) + "px";
                attr.left = (rect.left + parentWidth / 2 - viewWidth / 2) + "px";
                break;
            case "bottom-left":
                attr.top = (rect.top + parentHeight) + "px";
                attr.left = (rect.left) + "px";
                break;
            case "bottom-right":
                attr.top = (rect.top + parentHeight) + "px";
                attr.left = (rect.left + parentWidth - viewWidth) + "px";
                break;
            default:
                break;
        }
        for (var key in attr) {
            pop.style[key] = attr[key];
        }
    };
    PopoverController.prototype.hide = function () {
        var pop = this.popEle;
        pop.classList.remove("active");
        this.clearBodyClick();
    };
    return PopoverController;
}());
export { PopoverController };
//# sourceMappingURL=popoverController.js.map