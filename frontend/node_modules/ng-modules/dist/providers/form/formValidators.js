var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { I18nProvider } from "../i18n/i18n";
var FormValidators = (function () {
    function FormValidators() {
    }
    FormValidators.checkError = function (controls) {
        var error;
        for (var key in controls) {
            if ((!controls[key].valid) && controls[key].errors) {
                error = FormValidators.errors[key] || controls[key].errors[key] ||
                    (controls[key].errorTip) ||
                    (controls[key].controlName ? (controls[key].controlName + "填写不正确") : "") || I18nProvider.get("__15");
                break;
            }
        }
        if (error) {
            return error;
        }
    };
    FormValidators.hasValue = function (value) {
        if (typeof value == "string") {
            if (value) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            if (typeof value == "number") {
                return true;
            }
            if (value) {
                return true;
            }
            else {
                return false;
            }
        }
    };
    FormValidators.min = function (min, errorTip) {
        var minFn = function (control) {
            var value = control.value;
            if (FormValidators.hasValue(value)) {
                if (value > min) {
                    return null;
                }
                else {
                    return { min: errorTip || (min + "") };
                }
            }
            else {
                return null;
            }
        };
        return minFn;
    };
    FormValidators.max = function (max, errorTip) {
        var maxFn = function (control) {
            var value = control.value;
            if (FormValidators.hasValue(value)) {
                if (value < max) {
                    return null;
                }
                else {
                    return { max: errorTip || (max + "") };
                }
            }
            else {
                return null;
            }
        };
        return maxFn;
    };
    FormValidators.isInteger = function (errorTip) {
        var intFn = function (control) {
            var value = control.value;
            if (FormValidators.hasValue(value)) {
                var num = parseInt(value);
                if (value == num) {
                    return null;
                }
                else {
                    return { integer: errorTip || true };
                }
            }
            else {
                return null;
            }
        };
        return intFn;
    };
    ;
    FormValidators.isDecimal = function (errorTip) {
        var decFn = function (control) {
            var value = control.value;
            if (FormValidators.hasValue(value)) {
                var num = parseFloat(value);
                if (value == num) {
                    return null;
                }
                else {
                    return { decimal: errorTip || true };
                }
            }
            else {
                return null;
            }
        };
        return decFn;
    };
    ;
    FormValidators.isPhoneNo = function (errorTip) {
        var pnoFn = function (control) {
            var value = control.value;
            if (FormValidators.hasValue(value)) {
                if (/^1[3456789]\d{9}$/.test(value)) {
                    return null;
                }
                else {
                    return { phoneNo: errorTip || true };
                }
            }
            else {
                return null;
            }
        };
        return pnoFn;
    };
    FormValidators.asyncValidator = function (callback, errorTip) {
        var _this = this;
        var timer, cancel;
        return function (control) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, new Promise(function (resolve) {
                        clearTimeout(timer);
                        cancel && cancel();
                        cancel = function () { return resolve({ async: false }); };
                        timer = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                            var value;
                            return __generator(this, function (_a) {
                                value = control.value;
                                if (FormValidators.hasValue(value)) {
                                    try {
                                        resolve(null);
                                    }
                                    catch (e) {
                                        resolve({ async: errorTip || e });
                                    }
                                }
                                else {
                                    resolve(null);
                                }
                                return [2];
                            });
                        }); }, 500);
                    })];
            });
        }); };
    };
    FormValidators.controlName = function (name) {
        var nameFn = function (control) {
            control.controlName = name;
            return null;
        };
        return nameFn;
    };
    FormValidators.errorTip = function (err) {
        var nameFn = function (control) {
            control.errorTip = err;
            return null;
        };
        return nameFn;
    };
    FormValidators.errors = {
        required: I18nProvider.get("__9"),
        phoneNo: I18nProvider.get("__10"),
        min: I18nProvider.get("__11"),
        max: I18nProvider.get("__12"),
        integer: I18nProvider.get("__13"),
        decimal: I18nProvider.get("__14"),
        async: I18nProvider.get("__15"),
    };
    return FormValidators;
}());
export { FormValidators };
//# sourceMappingURL=formValidators.js.map