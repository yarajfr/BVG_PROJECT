import { InjectionToken } from "@angular/core";
import { Locales } from "../../locales/index";
export var I18NToken = new InjectionToken('I18NToken');
export function I18nProviderFactory(i18n) {
    var provider = new I18nProvider();
    provider.init(i18n);
    return provider;
}
var I18nProvider = (function () {
    function I18nProvider() {
    }
    I18nProvider.prototype.config = function (i18n) {
        i18n.map(function (item) {
            item.contains.map(function (lang) {
                lang = lang.toLocaleLowerCase();
                if (I18nProvider.LangList[lang]) {
                    for (var key in item) {
                        I18nProvider.LangList[lang][key] = item[key];
                    }
                }
                else {
                    I18nProvider.LangList[lang] = item;
                }
            });
        });
    };
    I18nProvider.prototype.init = function (i18n) {
        this.config(Locales);
        if (i18n) {
            if (i18n.locales) {
                this.config(i18n.locales);
            }
            if (i18n.default) {
                I18nProvider.defaultLocales = i18n.default;
            }
        }
    };
    I18nProvider.getLang = function () {
        var data = localStorage.getItem("i18n_lang");
        if (data) {
            return data;
        }
        else {
            var lang = window.navigator.language.toLocaleLowerCase();
            localStorage.setItem("i18n_lang", lang);
            return lang;
        }
    };
    I18nProvider.prototype.get = function (key) {
        return I18nProvider.get(key);
    };
    I18nProvider.get = function (key) {
        var lang = I18nProvider.getLang();
        try {
            if (I18nProvider.LangList[lang]) {
                return I18nProvider.LangList[lang][key] || I18nProvider.LangList[I18nProvider.defaultLocales][key] || "";
            }
            else {
                if (I18nProvider.LangList[I18nProvider.defaultLocales]) {
                    return I18nProvider.LangList[I18nProvider.defaultLocales][key] ||
                        "";
                }
                return "";
            }
        }
        catch (e) {
            console.log(lang + " locales file is lost, please check your code! \u8BED\u8A00\u5305\u4E22\u5931\uFF0C\u8BF7\u68C0\u67E5\u4EE3\u7801\uFF01");
        }
    };
    I18nProvider.prototype.changeLang = function (lang) {
        localStorage.setItem("i18n_lang", lang);
    };
    I18nProvider.LangList = {};
    I18nProvider.defaultLocales = "zh";
    return I18nProvider;
}());
export { I18nProvider };
//# sourceMappingURL=i18n.js.map