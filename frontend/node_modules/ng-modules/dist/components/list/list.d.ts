import { ElementRef, EventEmitter, ChangeDetectorRef, TemplateRef, QueryList } from '@angular/core';
import { Treetable } from './treetable/treetable';
export declare class ListCellComponent {
    name: any;
    prop: any;
    useTemplate: any;
    headerTemplate: any;
    width: any;
    css: any;
    invisiable: any;
    colspan: EventEmitter<{}>;
    rowspan: EventEmitter<{}>;
    template: TemplateRef<any>;
}
export declare class ListComponent {
    private cdr;
    constructor(cdr: ChangeDetectorRef);
    treetableInstance: Treetable;
    expandTree(item: any): void;
    compressTree(item: any): void;
    private _treetable;
    treetable: any;
    manual: boolean;
    datetime: any;
    treetableTmp: any;
    innerTemplates: {
        datetime: {};
        treetableTmp: {};
    };
    contentTemplates: any;
    listCellTep: QueryList<ListCellComponent>;
    _cellTemplates: any;
    cellTemplates: QueryList<ListCellComponent>;
    flat: any;
    templates: {};
    tableWidth: number;
    list: any;
    _totalSize: any;
    totalSize: any;
    _pageSize: number;
    pageSize: any;
    pageIndex: number;
    pageTotalIndex: number;
    container: ElementRef;
    _headers: any;
    headers: any;
    calcHeaders(headers: any): void;
    recalHeader(): void;
    onpage: EventEmitter<{}>;
    refresh(): void;
    loaded: boolean;
    loadingStatus: boolean;
    toPage(pageIndex: any): void;
    complete(e: PageEvent): void;
    inputPageIndex: any;
    inputPageKeyUp(e: any): void;
    resizeFn: any;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    tdDatas: {
        [index: string]: ListTdData;
    };
    tdKey(rowIndex: number, colIndex: number): string;
    getTdData(rowIndex: number, colIndex: number): ListTdData;
    calcRowspan: any;
    calcColspan: any;
    setCalcRowspan(fn: (data: ListTdData, ele: HTMLElement) => void): void;
    setCalcColspan(fn: (data: ListTdData, ele: HTMLElement) => void): void;
    sameRowCombine(e: ListTdData, ele: HTMLElement): void;
    copyRowCombine(e: ListTdData, ele: HTMLElement, target: number): void;
}
export interface PageEvent {
    isFirst: boolean;
    pageIndex: number;
    pageSize: number;
    list: any[];
    totalSize: number;
    complete: (e: PageEvent) => void;
    cancel: () => void;
}
export interface ListTdData {
    rowIndex: number;
    colIndex: number;
    list: any;
    headers: any;
    pre: any;
    current: any;
    next: any;
    prop: any;
    preProp: any;
    nextProp: any;
    rowspan?: number;
    colspan?: number;
    hideRow: Function;
    hideCol: Function;
    setRowspan: (i: number) => void;
    setColspan: (i: number) => void;
}
