var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, Renderer2 } from "@angular/core";
var FormInputStatus = (function () {
    function FormInputStatus(element, renderer2) {
        this.element = element;
        this.renderer2 = renderer2;
    }
    FormInputStatus.prototype.getParent = function (path) {
        var _this = this;
        if (!this.parentElement) {
            path.some(function (item) {
                if (item.nodeName) {
                    var node = item.nodeName.toLocaleLowerCase();
                    if (node == "label") {
                        _this.parentElement = item;
                        return true;
                    }
                }
            });
            return this.parentElement;
        }
        else {
            return this.parentElement;
        }
    };
    FormInputStatus.prototype.error = function () {
        if (this.parentElement) {
            this.renderer2.addClass(this.parentElement, "invalid");
            this.renderer2.removeClass(this.parentElement, "valid");
        }
        this.renderer2.addClass(this.element.nativeElement, "invalid");
        this.renderer2.removeClass(this.element.nativeElement, "valid");
    };
    FormInputStatus.prototype.success = function () {
        if (this.parentElement) {
            this.renderer2.addClass(this.parentElement, "valid");
            this.renderer2.removeClass(this.parentElement, "invalid");
        }
        this.renderer2.addClass(this.element.nativeElement, "valid");
        this.renderer2.removeClass(this.element.nativeElement, "invalid");
    };
    FormInputStatus = __decorate([
        Directive({
            selector: "input,select,textarea",
        }),
        __metadata("design:paramtypes", [ElementRef,
            Renderer2])
    ], FormInputStatus);
    return FormInputStatus;
}());
export { FormInputStatus };
//# sourceMappingURL=formInputStatus.js.map