var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, forwardRef } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { Input } from "@angular/core";
import { UtilProvider } from "../../../providers/util/util";
import { I18nProvider } from "../../../providers/i18n/i18n";
var DaterangeDirective = (function () {
    function DaterangeDirective(element, util) {
        this.element = element;
        this.util = util;
    }
    DaterangeDirective_1 = DaterangeDirective;
    DaterangeDirective.prototype.writeValue = function (value) {
        var format = "YYYY-MM-DD";
        if (this.daterange && this.daterange.locale && this.daterange.locale.format) {
            format = this.daterange.locale.format;
        }
        if (value && value.match(" - ")) {
            var moment_1 = window.moment;
            var data = value.split(" - ");
            $(this.element.nativeElement).data("daterangepicker").setStartDate(new Date(data[0]));
            $(this.element.nativeElement).data("daterangepicker").setStartDate(new Date(data[1]));
            $(this.element.nativeElement).val(moment_1(data[0]).format(format) + " - " + moment_1(data[1]).format(format));
        }
        else {
            $(this.element.nativeElement).val("");
        }
    };
    DaterangeDirective.prototype._registerOnChange = function () { };
    DaterangeDirective.prototype.registerOnChange = function (fn) {
        this._registerOnChange = fn;
    };
    DaterangeDirective.prototype.touched = function () { };
    DaterangeDirective.prototype.registerOnTouched = function (fn) {
        this.touched = fn;
    };
    DaterangeDirective.prototype.setDisabledState = function (isDisabled) { };
    Object.defineProperty(DaterangeDirective.prototype, "daterange", {
        get: function () {
            return this._config;
        },
        set: function (value) {
            this._config = value;
            this.setting(value);
        },
        enumerable: true,
        configurable: true
    });
    ;
    DaterangeDirective.prototype.ngOnInit = function () {
    };
    DaterangeDirective.prototype.setting = function (config) {
        var data = this.util.extend({
            singleDatePicker: false,
            autoUpdateInput: false,
            locale: I18nProvider.get("dateSetting"),
        }, config, true);
        $(this.element.nativeElement).daterangepicker(data);
        var that = this;
        $(this.element.nativeElement).on('apply.daterangepicker', function (ev, picker) {
            var format = "YYYY-MM-DD";
            if (that.daterange && that.daterange.locale && that.daterange.locale.format) {
                format = that.daterange.locale.format;
            }
            that._registerOnChange();
            $(this).val(picker.startDate.format(format) + " - " + picker.endDate.format(format));
        });
        $(this.element.nativeElement).on('cancel.daterangepicker', function () {
        });
    };
    var DaterangeDirective_1;
    __decorate([
        Input("daterange"),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DaterangeDirective.prototype, "daterange", null);
    DaterangeDirective = DaterangeDirective_1 = __decorate([
        Directive({
            selector: "[daterange]",
            providers: [
                { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return DaterangeDirective_1; }), multi: true }
            ],
        }),
        __metadata("design:paramtypes", [ElementRef,
            UtilProvider])
    ], DaterangeDirective);
    return DaterangeDirective;
}());
export { DaterangeDirective };
//# sourceMappingURL=daterange.js.map