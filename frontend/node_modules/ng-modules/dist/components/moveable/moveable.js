var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ElementRef, Directive, Output, EventEmitter, Input } from '@angular/core';
var MoveableComponent = (function () {
    function MoveableComponent(elementRef) {
        this.elementRef = elementRef;
        this.click = new EventEmitter();
        this.isMouseDown = false;
        this.isMoved = false;
    }
    ;
    MoveableComponent.prototype.ngOnInit = function () {
        this.target = this.moveDom || this.elementRef.nativeElement;
    };
    MoveableComponent.prototype.reMargin = function () {
        if (!this.calcMarginStatus) {
            this.calcMarginStatus = true;
            var style = window.getComputedStyle(this.target);
            var position = style.getPropertyValue("position");
            if (position == "absolute") {
                this.target.style.setProperty("margin", style.getPropertyValue("margin"));
            }
        }
    };
    MoveableComponent.prototype.mousedown = function (e) {
        var _this = this;
        this.preClientX = e.clientX;
        this.preClientY = e.clientY;
        this.isMouseDown = true;
        document.addEventListener("mousemove", this.moveEventFn = function (e) {
            _this.mousemove(e);
        });
        this.isMoved = false;
        document.addEventListener("mouseup", this.moveUpEventFn = function (e) {
            _this.mouseup(e);
        });
        this.reMargin();
    };
    MoveableComponent.prototype.mouseup = function (e) {
        this.isMouseDown = false;
        document.removeEventListener("mousemove", this.moveEventFn);
        document.removeEventListener("mouseup", this.moveUpEventFn);
        if (!this.isMoved) {
            this.click.emit(e);
        }
        this.isMoved = false;
    };
    MoveableComponent.prototype.mousemove = function (e) {
        if (this.isMouseDown) {
            var diffX = e.clientX - this.preClientX;
            var diffY = e.clientY - this.preClientY;
            if (diffX > 1 || diffY > 1 || diffY < -1 || diffX < -1) {
                this.isMoved = true;
            }
            this.preClientX = e.clientX;
            this.preClientY = e.clientY;
            var _a = [
                parseInt(this.target.style.left || '0') + diffX,
                parseInt(this.target.style.top || '0') + diffY
            ], left = _a[0], top_1 = _a[1];
            this.target.style.setProperty("left", left + "px");
            this.target.style.setProperty("top", top_1 + "px");
        }
        else {
            this.isMoved = false;
        }
    };
    __decorate([
        Input("moveable"),
        __metadata("design:type", HTMLElement)
    ], MoveableComponent.prototype, "moveDom", void 0);
    __decorate([
        Output("moveable"),
        __metadata("design:type", Object)
    ], MoveableComponent.prototype, "click", void 0);
    MoveableComponent = __decorate([
        Directive({
            selector: '[moveable]',
            host: {
                "(mousedown)": "mousedown($event)",
                "(mouseup)": "mouseup($event)",
            }
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], MoveableComponent);
    return MoveableComponent;
}());
export { MoveableComponent };
//# sourceMappingURL=moveable.js.map