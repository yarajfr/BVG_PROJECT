import { EventEmitter, Directive, ElementRef, Output, NgModule } from '@angular/core';
import { ResizeSensor } from 'css-element-queries';

import * as ɵngcc0 from '@angular/core';
class ResizedEvent {
    constructor(element, newWidth, newHeight, oldWidth, oldHeight) {
        this.element = element;
        this.newWidth = newWidth;
        this.newHeight = newHeight;
        this.oldWidth = oldWidth;
        this.oldHeight = oldHeight;
    }
}

class ResizedDirective {
    constructor(element) {
        this.element = element;
        this.resized = new EventEmitter();
    }
    ngOnInit() {
        // only initialize resize watching if sensor is availablei
        if (ResizeSensor) {
            this.resizeSensor = new ResizeSensor(this.element.nativeElement, () => this.onResized());
        }
    }
    ngOnDestroy() {
        if (this.resizeSensor) {
            this.resizeSensor.detach();
        }
    }
    onResized() {
        const newWidth = this.element.nativeElement.clientWidth;
        const newHeight = this.element.nativeElement.clientHeight;
        if (newWidth === this.oldWidth && newHeight === this.oldHeight) {
            return;
        }
        const event = new ResizedEvent(this.element, newWidth, newHeight, this.oldWidth, this.oldHeight);
        this.oldWidth = this.element.nativeElement.clientWidth;
        this.oldHeight = this.element.nativeElement.clientHeight;
        this.resized.emit(event);
    }
}
ResizedDirective.ɵfac = function ResizedDirective_Factory(t) { return new (t || ResizedDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ResizedDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ResizedDirective, selectors: [["", "resized", ""]], outputs: { resized: "resized" } });
ResizedDirective.ctorParameters = () => [
    { type: ElementRef }
];
ResizedDirective.propDecorators = {
    resized: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ResizedDirective, [{
        type: Directive,
        args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[resized]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { resized: [{
            type: Output
        }] }); })();

class AngularResizedEventModule {
}
AngularResizedEventModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularResizedEventModule });
AngularResizedEventModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularResizedEventModule_Factory(t) { return new (t || AngularResizedEventModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AngularResizedEventModule, { declarations: [ResizedDirective], exports: [ResizedDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularResizedEventModule, [{
        type: NgModule,
        args: [{
                declarations: [ResizedDirective],
                imports: [],
                exports: [ResizedDirective]
            }]
    }], null, null); })();

/*
 * Public API Surface of angular-resize-event
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AngularResizedEventModule, ResizedDirective, ResizedEvent };

//# sourceMappingURL=angular-resize-event.js.map