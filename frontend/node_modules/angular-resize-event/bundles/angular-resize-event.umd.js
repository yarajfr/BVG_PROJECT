(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('css-element-queries')) :
    typeof define === 'function' && define.amd ? define('angular-resize-event', ['exports', '@angular/core', 'css-element-queries'], factory) :
    (global = global || self, factory(global['angular-resize-event'] = {}, global.ng.core, global.cssElementQueries));
}(this, (function (exports, core, cssElementQueries) { 'use strict';

    var ResizedEvent = /** @class */ (function () {
        function ResizedEvent(element, newWidth, newHeight, oldWidth, oldHeight) {
            this.element = element;
            this.newWidth = newWidth;
            this.newHeight = newHeight;
            this.oldWidth = oldWidth;
            this.oldHeight = oldHeight;
        }
        return ResizedEvent;
    }());

    var ResizedDirective = /** @class */ (function () {
        function ResizedDirective(element) {
            this.element = element;
            this.resized = new core.EventEmitter();
        }
        ResizedDirective.prototype.ngOnInit = function () {
            var _this = this;
            // only initialize resize watching if sensor is availablei
            if (cssElementQueries.ResizeSensor) {
                this.resizeSensor = new cssElementQueries.ResizeSensor(this.element.nativeElement, function () { return _this.onResized(); });
            }
        };
        ResizedDirective.prototype.ngOnDestroy = function () {
            if (this.resizeSensor) {
                this.resizeSensor.detach();
            }
        };
        ResizedDirective.prototype.onResized = function () {
            var newWidth = this.element.nativeElement.clientWidth;
            var newHeight = this.element.nativeElement.clientHeight;
            if (newWidth === this.oldWidth && newHeight === this.oldHeight) {
                return;
            }
            var event = new ResizedEvent(this.element, newWidth, newHeight, this.oldWidth, this.oldHeight);
            this.oldWidth = this.element.nativeElement.clientWidth;
            this.oldHeight = this.element.nativeElement.clientHeight;
            this.resized.emit(event);
        };
        return ResizedDirective;
    }());
    ResizedDirective.decorators = [
        { type: core.Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[resized]'
                },] }
    ];
    ResizedDirective.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    ResizedDirective.propDecorators = {
        resized: [{ type: core.Output }]
    };

    var AngularResizedEventModule = /** @class */ (function () {
        function AngularResizedEventModule() {
        }
        return AngularResizedEventModule;
    }());
    AngularResizedEventModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [ResizedDirective],
                    imports: [],
                    exports: [ResizedDirective]
                },] }
    ];

    /*
     * Public API Surface of angular-resize-event
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AngularResizedEventModule = AngularResizedEventModule;
    exports.ResizedDirective = ResizedDirective;
    exports.ResizedEvent = ResizedEvent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-resize-event.umd.js.map
