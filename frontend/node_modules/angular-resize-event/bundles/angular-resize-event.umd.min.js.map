{"version":3,"sources":["../../../projects/angular-resize-event/src/lib/resized-event.ts","../../../projects/angular-resize-event/src/lib/resized.directive.ts","../../../projects/angular-resize-event/src/lib/angular-resized-event.module.ts"],"names":["element","newWidth","newHeight","oldWidth","oldHeight","this","ResizedDirective","resized","EventEmitter","prototype","ngOnInit","_this","ResizeSensor","resizeSensor","nativeElement","onResized","ngOnDestroy","detach","clientWidth","clientHeight","event","ResizedEvent","emit","Directive","args","selector","ElementRef","Output","NgModule","declarations","imports","exports"],"mappings":"kXAGE,SACWA,EACAC,EACAC,EACAC,EACAC,GAJAC,KAAAL,QAAAA,EACAK,KAAAJ,SAAAA,EACAI,KAAAH,UAAAA,EACAG,KAAAF,SAAAA,EACAE,KAAAD,UAAAA,gBCUX,SAAAE,EAA6BN,GAAAK,KAAAL,QAAAA,EAPpBK,KAAAE,QAAU,IAAIC,EAAAA,oBAUvBF,EAAAG,UAAAC,SAAA,WAAA,IAAAC,EAAAN,KAEMO,EAAAA,eACFP,KAAKQ,aAAe,IAAID,EAAAA,aAAaP,KAAKL,QAAQc,eAAe,WAAM,OAAAH,EAAKI,iBAIhFT,EAAAG,UAAAO,YAAA,WACMX,KAAKQ,cACPR,KAAKQ,aAAaI,UAIdX,EAAAG,UAAAM,UAAA,WACN,IAAMd,EAAWI,KAAKL,QAAQc,cAAcI,YACtChB,EAAYG,KAAKL,QAAQc,cAAcK,aAE7C,GAAIlB,IAAaI,KAAKF,UAAYD,IAAcG,KAAKD,UAArD,CAIA,IAAMgB,EAAQ,IAAIC,EAChBhB,KAAKL,QACLC,EACAC,EACAG,KAAKF,SACLE,KAAKD,WAGPC,KAAKF,SAAWE,KAAKL,QAAQc,cAAcI,YAC3Cb,KAAKD,UAAYC,KAAKL,QAAQc,cAAcK,aAE5Cd,KAAKE,QAAQe,KAAKF,8BAjDrBG,EAAAA,UAASC,KAAA,CAAC,CAETC,SAAU,yDANQC,EAAAA,+CAUjBC,EAAAA,gBCDH,iCANCC,EAAAA,SAAQJ,KAAA,CAAC,CACRK,aAAc,CAACvB,GACfwB,QAAS,GAETC,QAAS,CAACzB","sourcesContent":["import { ElementRef } from '@angular/core';\n\nexport class ResizedEvent {\n  constructor(\n    readonly element: ElementRef,\n    readonly newWidth: number,\n    readonly newHeight: number,\n    readonly oldWidth: number,\n    readonly oldHeight: number\n  ) {}\n}\n","import { Directive, ElementRef, EventEmitter, OnInit, Output, OnDestroy } from '@angular/core';\nimport { ResizeSensor } from 'css-element-queries';\nimport { ResizedEvent } from './resized-event';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[resized]'\n})\nexport class ResizedDirective implements OnInit, OnDestroy {\n\n  @Output()\n  readonly resized = new EventEmitter<ResizedEvent>();\n\n  private oldWidth: number;\n  private oldHeight: number;\n\n  private resizeSensor: ResizeSensor;\n\n  constructor(private readonly element: ElementRef) {\n  }\n\n  ngOnInit(): void {\n    // only initialize resize watching if sensor is availablei\n    if (ResizeSensor) {\n      this.resizeSensor = new ResizeSensor(this.element.nativeElement, () => this.onResized());\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.resizeSensor) {\n      this.resizeSensor.detach();\n    }\n  }\n\n  private onResized(): void {\n    const newWidth = this.element.nativeElement.clientWidth;\n    const newHeight = this.element.nativeElement.clientHeight;\n\n    if (newWidth === this.oldWidth && newHeight === this.oldHeight) {\n      return;\n    }\n\n    const event = new ResizedEvent(\n      this.element,\n      newWidth,\n      newHeight,\n      this.oldWidth,\n      this.oldHeight\n    );\n\n    this.oldWidth = this.element.nativeElement.clientWidth;\n    this.oldHeight = this.element.nativeElement.clientHeight;\n\n    this.resized.emit(event);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { ResizedDirective } from './resized.directive';\n\n@NgModule({\n  declarations: [ResizedDirective],\n  imports: [\n  ],\n  exports: [ResizedDirective]\n})\nexport class AngularResizedEventModule { }\n"]}